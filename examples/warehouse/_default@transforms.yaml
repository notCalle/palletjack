# Value transformation rules
# ==========================
#
# Since the data in the warehouse files is to be written by humans, we
# don't want to have to repeat information. Instead, write each piece
# of information once and use transformation rules in this file to
# expand that into the forms expected by later tools.
#
#
# YAML structure:
#
# - <key>:
#   - <synthesizing rule>
#   - <synthesizing rule>
#   ...
# - <key>:
#   - <synthesizing rule>
#   - <synthesizing rule>
#   ...
# ...
#
# Synthesize a value for each key according to the rules. Keys are
# processed in order top to bottom, so later rules may use synthesized
# values from earlier processed keys.
#
# Rules are processed in order top to bottom, and the first one to
# produce a value is used.
#
# Two synthesizing rules are currently defined: "synthesize" and
# "synthesize_regexp".
#
# The synthesized value will override an inherited value for a key,
# but in some cases the intent is actually to only synthesize a value
# when there is no inherited value. For this we have the "inherit"
# transform, that does nothing, except abort the transform chain for a
# key if there is an inherited value.
#
#
# synthesize
# ----------
#
# YAML structure:
#
#   - synthesize: "rule"
#
# or
#
#   - synthesize:
#     - "rule"
#     - "rule"
#     ...
#
# Rules are strings used to build the new value. The value of another
# key is inserted by "#[key]", and all other characters are copied
# verbatim.
#
# Rules are evaluated in order, and the first one to
# successfully produce a value without failing a key lookup is
# used.
#
# Example:
#
#   - net.dns.fqdn:
#     - synthesize: "#[net.dns.name].#[domain.name]"
#
#   - chassis.nic.name:
#     - synthesize:
#       - "p#[chassis.nic.pcislot]p#[chassis.nic.port]"
#       - "em#[chassis.nic.port]"
#
#
# synthesize_regexp
# -----------------
#
# YAML structure:
#
#   - synthesize_regexp:
#       sources:
#         source0:
#           key: "key"
#           regexp: "regexp"
#         source1:
#           key: "key"
#           regexp: "regexp"
#         ...
#       produce: "recipe"
#
# where:
#
# sourceN Arbitrary number of sources for partial values, with arbitrary
#         names
#
# key     Name of the key to read a partial value from
#
# regexp  Regular expression for parsing the value indicated by "key",
#         with named captures used to save substrings for producing the
#         final value. Capture names must not be repeated within the same
#         "synthesize_regexp" block.
#
# produce A recipe for building the new value. Named captures are
#         inserted by "#[capture]", and all other characters are copied
#         verbatim.
#
# Example:
#
# Take strings like "192.168.0.0_24" from "pallet.ipv4_network" and
# produce strings like "192.168.0.0/24" in "net.ipv4.cidr".
#
#  - net.ipv4.cidr:
#    - synthesize_regexp:
#        sources:
#          ipv4_network:
#            key: "pallet.ipv4_network"
#            regexp: "^(?<network>[0-9.]+)_(?<prefix_length>[0-9]+)$"
#        produce: "#[network]/#[prefix_length]"
#
#
# inherit
# ---------
#
# YAML structure:
#
#   - inherit: ~
#
# Declares that the key is to be inherited first. By default,
# synthesis rules shadows inherited values for a key.
#
# Any parameters are currently ignored, but should be ~ (nil).
#
# Example:
#
# Don't synthesize net.layer2.name when there is an inherited value,
# e.g. for ipv4_interface, that inherits from a virtual phy_nic
# instead of a physical phy_nic.
#
#  - net.layer2.name:
#    - inherit: ~
#    - synthesize: "#[chassis.nic.name]"

# Default transforms
# ==================
#
# *.name:
#
#   The name of an object is the name of the directory it resides in.
#   To prevent us having to repeat that information in the YAML data,
#   read the object names from the links (in the "pallet." namespace)
#   and populate a "*.name" key.

  location.room.name:
    - string: "%{pallet.room}"
  location.building.name:
    - string: "%{pallet.building}"
  chassis.name:
    - string: "%{pallet.chassis}"
  net.dns.domain:
    - string: "%{pallet.domain}"
  location.rack.name:
    - string: "%{pallet.rack}"
  system.name:
    - string: "%{pallet.system}"
  net.dns.name:                      # Rules can reference other
    - string: "%{system.name}"       # default values


# These keys have the same data as "*.name" above, but have actual
# mening to their names in addition to identification, so use keys
# named for the purpose of the data instead of "name".

  system.os:
    - string: "%{pallet.os}"
  net.ipv4.address:
    - string: "%{pallet.ipv4_interface}"
  net.layer2.address:
    - string: "%{pallet.phy_nic}"
  host.kickstart.config:
    - string: "%{pallet.os}-%{pallet.netinstall}"


# Simple pasting of previous values to synthesize a new one. Note that
# we are, again, accessing a previously synthesized value.

  net.dns.fqdn:
    - string: "%{net.dns.name}.%{net.dns.domain}"

  host.kickstart.ksurl:
    - string: "http://kickstart/%{host.kickstart.config}.cfg"
  host.pxelinux.kernel:
    - string: "/boot/%{system.os}/vmlinuz"


# A list of synthesizing rules is processed from top to bottom, and
# the first one to produce a value is used. In this case, if
# "chassis.nic.pcislot" doesn't exist, the first rule fails and the
# second one takes over.

  chassis.nic.name:
    - string:
      - "p%{chassis.nic.pcislot}p%{chassis.nic.port}"
      - "em%{chassis.nic.port}"
  host.pxelinux.config:
    - string:
      - "%{pallet.os}-%{pallet.netinstall}"
      - "%{pallet.os}"


# This is probably a bad default, but it's at least something. If the
# rules for "chassis.nic.name" above get expanded to include the
# entire Linux Udev ruleset, this will work perfectly.
#
# A phy_nic can be either physical or virtual. Ensure that any
# assigned value for a virtual phy_nic is inherited, and not
# overridden by the physical chassis based name.

  net.layer2.name:
    - string:
      - "%{^.net.layer2.name}"
      - "%{chassis.nic.name}"


# Regexp synthesizing rules. ipv4_network objects are named like
# "192.168.0.0_24", so with a regexp like
# "^(?<network>[0-9.]+)_(?<prefix_length>[0-9]+)$" the named captures
# are bound to network:"192.168.0.0" and prefix_length:"24",
# respectively.
#
# Different tools reading the data later will need either the prefix
# length or the entire netblock in CIDR format, so we produce both
# forms. A little repetition here allows us to have much simpler tools
# later in the chain.

  net.ipv4.prefixlen:
    - regexp:
        pallet.ipv4_network: "_(?<prefix_length>[0-9]+)$"
      string: "%{prefix_length}"
  net.ipv4.cidr:
    - regexp:
        pallet.ipv4_network: "^(?<network>[0-9.]+)_(?<prefix_length>[0-9]+)$"
      string: "%{network}/%{prefix_length}"

  host.pxelinux.append:
    - regexp:
        system.os: "^(?<os>.*)$"
        host.kickstart.ksurl: "^(?<ksurl>http://.*)$"
        host.kickstart.baseurl: "^(?<baseurl>http://.*)$"
      string:
        - "initrd=/boot/%{os}/initrd.img
           inst.ks=#[ksurl]"
        - "initrd=/boot/%{os}/initrd.img
           method=%{baseurl}"


# Chassis names contain multiple colon-separated fields. Pick these
# apart and fill in subkeys with the individual field values.
#
# We'll be using the same regexp several times, so we use YAML
# aliasing to reference a single definition.

  chassis.vendor:
    - regexp: &pallet_chassis
        pallet.chassis: "^(?<vendor>[^:]*):((?<line>[^:-]*)-)?((?<series>[^:-]*)-)?(?<model>[^:]*):(?<serial>[^:]*)$"
      string: "%{vendor}"
  chassis.model:
    - regexp: *pallet_chassis
      string:
        - "%{line} %{series} %{model}"
        - "%{line} %{model}"
        - "%{model}"
  chassis.serial:
    - regexp: *pallet_chassis
      string: "%{serial}"
